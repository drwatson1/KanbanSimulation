<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BizArk.Core</name>
    </assembly>
    <members>
        <member name="T:BizArk.Core.Application">
            <summary>
            Primary class for application information and plugin support.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Title">
            <summary>
            Gets the title of the executing assembly from AssemblyTitleAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Version">
            <summary>
            Gets the version of the executing assembly.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Description">
            <summary>
            Gets the description of the executing assembly from AssemblyDescriptionAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Company">
            <summary>
            Gets the company name of the executing assembly from AssemblyCompanyAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Product">
            <summary>
            Gets the product name of the executing assembly from AssemblyProductAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Copyright">
            <summary>
            Gets the copyright of the executing assembly from AssemblyCopyrightAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.Trademark">
            <summary>
            Gets the trademark of the executing assembly from AssemblyTrademarkAttribute.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.ExePath">
            <summary>
            Gets the path the the executing assembly.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.ExeName">
            <summary>
            Gets the just the name of the exe (without the extension).
            </summary>
        </member>
        <member name="M:BizArk.Core.Application.GetPath(System.String)">
            <summary>
            Returns an absolute path relative to the ExePath.
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Application.GetTempPath">
            <summary>
            Gets the path to the temporary directory for this application. This is a subdirectory off of the system temp directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Application.CleanTempDirectory">
            <summary>
            Removes the temp directory for this application.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.ClickOnceDeployed">
            <summary>
            Gets a value that determines if the application was deployed via ClickOnce.
            </summary>
        </member>
        <member name="P:BizArk.Core.Application.ClickOnceUrl">
            <summary>
            Gets the URL used for click-once deployed apps.
            </summary>
        </member>
        <member name="T:BizArk.Core.Collections.HashList`2">
            <summary>
            Represents a generic collection of key/value pairs. The enumerator returns the values in the order assigned.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:BizArk.Core.Collections.HashList`2.Item(`0)">
            <summary>
            Gets or sets the value for the given key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Collections.HashList`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the designated index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Collections.HashList`2.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:BizArk.Core.Collections.HashList`2.IsReadOnly">
            <summary>
            Gets a value that determines if the list if readonly.
            </summary>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.Insert(System.Int32,`0,`1)">
            <summary>
            Adds the value to the list.
            </summary>
            <param name="index"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.Add(`0,`1)">
            <summary>
            Adds the value to the list.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.Remove(`0)">
            <summary>
            Removes the item from the list.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.Remove(`1)">
            <summary>
            Removes the item from the list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.RemoveAt(System.Int32)">
            <summary>
            Removes the value at the designated index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.Clear">
            <summary>
            Removes all the items from the list.
            </summary>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.GetValue(`0)">
            <summary>
            Gets the value from the list.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.GetValue(`0,`1)">
            <summary>
            Gets the value from the list. If the key is not in the list, returns the default value.
            </summary>
            <param name="key"></param>
            <param name="dflt">Default value to return if the key does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value from the list. Returns true if the value exists, otherwise false.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.SetValue(`0,`1)">
            <summary>
            Sets the value in the list.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.ContainsKey(`0)">
            <summary>
            Determines if the key is in the list.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.Contains(`1)">
            <summary>
            Determines if the item is in the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.IndexOf(`0)">
            <summary>
            Gets the index of the given item.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.IndexOf(`1)">
            <summary>
            Gets the index of the given item.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.GetKey(`1)">
            <summary>
            Gets the key based on the value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.GetKeyFromIndex(System.Int32)">
            <summary>
            Gets the key based on the index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Collections.HashList`2.Keys">
            <summary>
            Returns the collection of keys.
            </summary>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.GetEnumerator">
            <summary>
            Gets the enumerator for the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.ToArray">
            <summary>
            Gets an array of the values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Collections.HashList`2.System#Collections#Generic#ICollection{TValue}#CopyTo(`1[],System.Int32)">
            <summary>
            Copies the values to an array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="T:BizArk.Core.Convert.BaConverter">
            <summary>
            This class provides the conversion for ConvertEx. BaConverter is not threadsafe. 
            However, ConvertEx uses it in a thread-safe manner.
            </summary>
            <threadsafe static="false" instance="false"></threadsafe>
        </member>
        <member name="M:BizArk.Core.Convert.BaConverter.Try(System.Object,System.Type,System.Object@)">
            <summary>
            Converts the value to the specified type. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
            <param name="to">The type to convert to.</param>
            <param name="convertedValue">The converted value. Only holds a converted value if Try returns true.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-value is null and conversionType is a value type.</exception>
            <exception cref="T:System.ArgumentNullException">conversionType is null.</exception>
        </member>
        <member name="M:BizArk.Core.Convert.BaConverter.IsEmpty(System.Object)">
            <summary>
            Checks to see if the value is empty. The value is empty if it is null, DBNull, or matches the MinValue, MaxValue, or Empty fields of the values type.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.BaConverter.RegisterEmptyValues(System.Type)">
            <summary>
            Registers the default empty values for this type for use in IsEmpty.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:BizArk.Core.Convert.BaConverter.GetEmptyValues(System.Type)">
            <summary>
            Gets the values that represent empty for the given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.BaConverter.GetDefaultEmptyValue(System.Type)">
            <summary>
            Gets the default value that represents empty for the given type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Convert.BaConverter.GetDefaultEmptyValue``1">
            <summary>
            Gets the default value that represents empty for the given type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.ByteArrayImageConversionStrategy">
            <summary>
            Uses the IConvertible interface to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ByteArrayImageConversionStrategy.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="to">The type to convert the value to.</param>
            <param name="convertedValue">Return the value if converted.</param>
            <returns>True if able to convert the value.</returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.ByteArrayStringConversionStrategy">
            <summary>
            Converts a string to a byte[] (and vice-versa).
            </summary>
        </member>
        <member name="P:BizArk.Core.Convert.Strategies.ByteArrayStringConversionStrategy.Encoding">
            <summary>
            Gets the encoding to use for converting the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ByteArrayStringConversionStrategy.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="to">The type to convert the value to.</param>
            <param name="convertedValue">Return the value if converted.</param>
            <returns>True if able to convert the value.</returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.ConvertibleConversionStrategy">
            <summary>
            Uses the IConvertible interface to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertibleConversionStrategy.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="to">The type to convert the value to.</param>
            <param name="convertedValue">Return the value if converted.</param>
            <returns>True if able to convert the value.</returns>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertibleConversionStrategy.GetTrueType(System.Type)">
            <summary>
            Handles nullable types.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.ConvertMethodConversionStrategy">
            <summary>
            Uses a conversion method to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.ConvertMethodConversionStrategy.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="to">The type to convert the value to.</param>
            <param name="convertedValue">Return the value if converted.</param>
            <returns>True if able to convert the value.</returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.CtorConversionStrategy">
            <summary>
            Uses a typed constructor to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.CtorConversionStrategy.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="to">The type to convert the value to.</param>
            <param name="convertedValue">Return the value if converted.</param>
            <returns>True if able to convert the value.</returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.EnumConversionStrategy">
            <summary>
            Converts to enumeration values.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.EnumConversionStrategy.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="to">The type to convert the value to.</param>
            <param name="convertedValue">Return the value if converted.</param>
            <returns>True if able to convert the value.</returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.NullValueConversionStrategy">
            <summary>
            Strategy used to return the default value for a type;
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.NullValueConversionStrategy.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="to">The type to convert the value to.</param>
            <param name="convertedValue">Return the value if converted.</param>
            <returns>True if able to convert the value.</returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.IConvertStrategy">
            <summary>
            Interface for defining conversion strategies. Used in ConvertEx. Each strategy object should be used to convert from exactly one type to another.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.IConvertStrategy.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="to">The type to convert the value to.</param>
            <param name="convertedValue">Return the value if converted.</param>
            <returns>True if able to convert the value.</returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.AssignableFromConversionStrategy">
            <summary>
            Strategy used to do no conversion at all. Just returns the value that was sent in if it can be assigned to from the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.AssignableFromConversionStrategy.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="to">The type to convert the value to.</param>
            <param name="convertedValue">Return the value if converted.</param>
            <returns>True if able to convert the value.</returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.StaticMethodConversionStrategy">
            <summary>
            Uses a typed constructor to convert the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.StaticMethodConversionStrategy.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="to">The type to convert the value to.</param>
            <param name="convertedValue">Return the value if converted.</param>
            <returns>True if able to convert the value.</returns>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.StringToBoolConversionStrategy">
            <summary>
            Converts from a string to a bool.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.StringToBoolConversionStrategy.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="to">The type to convert the value to.</param>
            <param name="convertedValue">Return the value if converted.</param>
            <returns>True if able to convert the value.</returns>
        </member>
        <member name="P:BizArk.Core.Convert.Strategies.StringToBoolConversionStrategy.TrueValues">
            <summary>
            Gets the list of values that will equate to True. Everything else is false.
            </summary>
        </member>
        <member name="T:BizArk.Core.Convert.Strategies.TypeConverterConversionStrategy">
            <summary>
            Uses a TypeConverter to perform a conversion.
            </summary>
        </member>
        <member name="M:BizArk.Core.Convert.Strategies.TypeConverterConversionStrategy.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="to">The type to convert the value to.</param>
            <param name="convertedValue">Return the value if converted.</param>
            <returns>True if able to convert the value.</returns>
        </member>
        <member name="T:BizArk.Core.ConvertEx">
            <summary>
            This class provides the ability to convert types 
            beyond what is provided by the System.Convert
            class.
            </summary>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToBool(System.Object)">
            <summary>
            Converts the value to a Boolean. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToChar(System.Object)">
            <summary>
            Converts the value to a Char. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToSByte(System.Object)">
            <summary>
            Converts the value to a SByte. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToByte(System.Object)">
            <summary>
            Converts the value to a Byte. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToShort(System.Object)">
            <summary>
            Converts the value to a Int16. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToUShort(System.Object)">
            <summary>
            Converts the value to a UInt16. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToInt(System.Object)">
            <summary>
            Converts the value to a Int32. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToUInt(System.Object)">
            <summary>
            Converts the value to a UInt32. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToLong(System.Object)">
            <summary>
            Converts the value to a Int64. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToULong(System.Object)">
            <summary>
            Converts the value to a UInt64. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToSingle(System.Object)">
            <summary>
            Converts the value to a Single. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToFloat(System.Object)">
            <summary>
            Converts the value to a Single. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToDouble(System.Object)">
            <summary>
            Converts the value to a Double. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToDecimal(System.Object)">
            <summary>
            Converts the value to a Decimal. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToDateTime(System.Object)">
            <summary>
            Converts the value to a DateTime. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="M:BizArk.Core.ConvertEx.ToString(System.Object)">
            <summary>
            Converts the value to a String. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
        </member>
        <member name="P:BizArk.Core.ConvertEx.Converter">
            <summary>
            According to the documentation, we can't initialize 
            sConverter in the class (only run once), we must
            initialize it in a method call.
            </summary>
            https://msdn.microsoft.com/en-us/library/system.threadstaticattribute.aspx
        </member>
        <member name="M:BizArk.Core.ConvertEx.To``1(System.Object)">
            <summary>
            Converts the value to the specified type. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface. This is an alias 
            to ChangeType.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">The value to convert from.</param>
            <returns></returns>
            <remarks>
            <para>The ChangeType method converts a value to another type.</para>
            <para>It can use a number of different conversion techniques depending on
            what is most appropriate based on the type of the value and the type it
            is converting to. The following lists explains the order that the checks 
            are made in.
            <list type="">
            <item>String to Boolean - Used when we are converting from a string to a boolean. Valid values for true are "true", "t", "yes", "1", and "-1", everything else is false.</item>
            <item>TypeConverter - Used when a TypeConverter exists for either the type we are converting to or from that can convert to the other type.</item>
            <item>Parse method - Used when the type we are converting from is a string and the type we are converting to defines a static, parameterless Parse method that returns the type we are converting to.</item>
            <item>Convert method - Used when the type we are converting from defines an instance method called ToXXX where XXX is the name of the type we are converting to with some common aliases allowed (example ToBool or ToInt instead of ToBoolean and ToInt32). The method must return the type we are converting to</item>
            <item>IConvertible - Used when the type we are converting from implements the IConvertible interface.</item>
            </list>
            </para>
            <para>This method makes use of the strategy pattern for determining how to 
            convert values. To define a custom strategy to convert from one type to 
            another, define a class that implements the IConvertStrategy interface and
            register it with the ConvertStrategyMgr class.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-value is null and conversionType is a value type.</exception>
            <exception cref="T:System.ArgumentNullException">conversionType is null.</exception>
        </member>
        <member name="M:BizArk.Core.ConvertEx.To(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Converts the value to the specified type. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface.
            </summary>
            <param name="value">The value to convert from.</param>
            <param name="to">The type to convert to.</param>
            <param name="provider">The IFormatProvider to use for the conversion.</param>
            <returns></returns>
            <remarks>
            <para>The ChangeType method converts a value to another type.</para>
            <para>It can use a number of different conversion techniques depending on
            what is most appropriate based on the type of the value and the type it
            is converting to. The following lists explains the order that the checks 
            are made in.
            <list type="">
            <item>String to Boolean - Used when we are converting from a string to a boolean. Valid values for true are "true", "t", "yes", "1", and "-1", everything else is false.</item>
            <item>TypeConverter - Used when a TypeConverter exists for either the type we are converting to or from that can convert to the other type.</item>
            <item>Parse method - Used when the type we are converting from is a string and the type we are converting to defines a static, parameterless Parse method that returns the type we are converting to.</item>
            <item>Convert method - Used when the type we are converting from defines an instance method called ToXXX where XXX is the name of the type we are converting to with some common aliases allowed (example ToBool or ToInt instead of ToBoolean and ToInt32). The method must return the type we are converting to</item>
            <item>IConvertible - Used when the type we are converting from implements the IConvertible interface.</item>
            </list>
            </para>
            <para>This method makes use of the strategy pattern for determining how to 
            convert values. To define a custom strategy to convert from one type to 
            another, define a class that implements the IConvertStrategy interface and
            register it with the ConvertStrategyMgr class.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-value is null and conversionType is a value type.</exception>
            <exception cref="T:System.ArgumentNullException">conversionType is null.</exception>
        </member>
        <member name="M:BizArk.Core.ConvertEx.Try(System.Object,System.Type,System.Object@)">
            <summary>
            Attempts to convert the value to the specified type. 
            </summary>
            <param name="value">The value to convert from.</param>
            <param name="to">The type to convert to.</param>
            <param name="convertedValue">The converted value.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
            <exception cref="T:System.ArgumentNullException">to is null.</exception>
        </member>
        <member name="M:BizArk.Core.ConvertEx.Try``1(System.Object,``0@)">
            <summary>
            Attempts to convert the value to the specified type. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value to convert from.</param>
            <param name="convertedValue">The converted value.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        </member>
        <member name="M:BizArk.Core.ConvertEx.IsEmpty(System.Object)">
            <summary>
            Checks to see if the value is empty. The value is empty if it is null, DBNull, or matches the MinValue, MaxValue, or Empty fields of the values type.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ConvertEx.GetDefaultEmptyValue``1">
            <summary>
            Gets the default value that represents empty for the given type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ConvertEx.GetDefaultEmptyValue(System.Type)">
            <summary>
            Gets the default value that represents empty for the given type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.DataAnnotations.SetAttribute">
            <summary>
            Ensures the value is contained within the set of values.
            </summary>
        </member>
        <member name="M:BizArk.Core.DataAnnotations.SetAttribute.#ctor(System.Object[])">
            <summary>
            Creates an instance of SetAttribute.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:BizArk.Core.DataAnnotations.SetAttribute.#ctor(System.Collections.IEqualityComparer,System.Object[])">
            <summary>
            Creates an instance of SetAttribute.
            </summary>
            <param name="comparer">The comparer to use to compare the values.</param>
            <param name="values"></param>
        </member>
        <member name="M:BizArk.Core.DataAnnotations.SetAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Creates an instance of SetAttribute.
            </summary>
            <param name="ignoreCase"></param>
            <param name="values"></param>
        </member>
        <member name="P:BizArk.Core.DataAnnotations.SetAttribute.Comparer">
            <summary>
            Gets the comparer to use to compare the values. If not set, uses Values[x].Equals(value).
            </summary>
        </member>
        <member name="P:BizArk.Core.DataAnnotations.SetAttribute.Values">
            <summary>
            Gets the set of valid values.
            </summary>
        </member>
        <member name="M:BizArk.Core.DataAnnotations.SetAttribute.FormatErrorMessage(System.String)">
            <summary>
            Applies formatting to an error message, based on the data field where the error occurred.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.DataAnnotations.SetAttribute.IsValid(System.Object)">
            <summary>
            Checks that the value of the data field is valid.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Data.BaField">
            <summary>
            Contains the value and other information about a field.
            </summary>
        </member>
        <member name="M:BizArk.Core.Data.BaField.#ctor(BizArk.Core.Data.BaObject,System.String,System.Type,System.Object)">
            <summary>
            Creates an instance of BaField
            </summary>
            <param name="obj">The object this belongs to.</param>
            <param name="name">Name of the field.</param>
            <param name="fieldType">The data type for the field.</param>
            <param name="dflt">Default value for the field. Used to determine if the field has changed. If null, it is converted to the default value for fieldType.</param>
        </member>
        <member name="P:BizArk.Core.Data.BaField.Object">
            <summary>
            Get the object this field belongs to.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.BaField.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.BaField.Value">
            <summary>
            Gets or sets the value of the field.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.BaField.DefaultValue">
            <summary>
            Gets or sets the default value for the field. IsChanged is true if the default differs from Value. DefaultValue is returned if getting the value and it is not set.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.BaField.IsSet">
            <summary>
            Gets a flag that determines if the value is set or not.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.BaField.IsChanged">
            <summary>
            Gets a flag that determines if the field has been modified from it's default value.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.BaField.FieldType">
            <summary>
            Gets the data type for the field.
            </summary>
        </member>
        <member name="T:BizArk.Core.Data.BaFieldList">
            <summary>
            List of BizArk fields.
            </summary>
        </member>
        <member name="M:BizArk.Core.Data.BaFieldList.#ctor">
            <summary>
            Creates an instance of BaFieldList.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.BaFieldList.Item(System.String)">
            <summary>
            Gets the field with the given name.
            </summary>
            <param name="fldName"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Data.BaFieldList.Item(System.Int32)">
            <summary>
            Gets the field at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Data.BaFieldList.Count">
            <summary>
            Gets the number of fields in the list.
            </summary>
        </member>
        <member name="M:BizArk.Core.Data.BaFieldList.ContainsField(System.String)">
            <summary>
            Determines if the field exists in the list.
            </summary>
            <param name="fldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.BaFieldList.GetEnumerator">
            <summary>
            Gets the enumerator for the fields.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Data.BaObjectOptions">
            <summary>
            Options for the BaObject.
            </summary>
        </member>
        <member name="M:BizArk.Core.Data.BaObjectOptions.#ctor">
            <summary>
            Creates a new instance of BaObjectOptions.
            </summary>
        </member>
        <member name="M:BizArk.Core.Data.BaObjectOptions.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of BaObjectOptions.
            </summary>
            <param name="strict">Sets both StrictGet and StrictSet to this value.</param>
        </member>
        <member name="M:BizArk.Core.Data.BaObjectOptions.#ctor(System.Object)">
            <summary>
            Creates a new instance of BaObjectOptions.
            </summary>
            <param name="schema">An object that contains properties that will be used to initialize the fields of the object. Can be a DataRow, IDataReader, or POCO.</param>
        </member>
        <member name="M:BizArk.Core.Data.BaObjectOptions.#ctor(System.Boolean,System.Object)">
            <summary>
            Creates a new instance of BaObjectOptions.
            </summary>
            <param name="strict">Sets both StrictGet and StrictSet to this value.</param>
            <param name="schema">An object that contains properties that will be used to initialize the fields of the object. Can be a DataRow, IDataReader, or POCO.</param>
        </member>
        <member name="P:BizArk.Core.Data.BaObjectOptions.StrictGet">
            <summary>
            Gets or sets a flag that determines if getting a field value is strict or not. If strict and the field doesn't exist, an exception is thrown.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.BaObjectOptions.StrictSet">
            <summary>
            Gets or sets a flag that determines if setting a field value is strict or not. If strict and the field doesn't exist, an exception is thrown.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.BaObjectOptions.Schema">
            <summary>
            Gets or sets the object that contains properties that will be used to initialize the fields of the object. Can be a DataRow, IDataReader, or POCO.
            </summary>
        </member>
        <member name="T:BizArk.Core.Data.BaObject">
            <summary>
            An object that can be used as dynamic. Provides a property bag implementation as well as keeps track of what fields are modified for efficient updates.
            </summary>
        </member>
        <member name="M:BizArk.Core.Data.BaObject.#ctor(System.Boolean,System.Object)">
            <summary>
            Creates a new instance of BaObject.
            </summary>
            <param name="strict">If true, only fields added can be set or retrieved. If false, getting a field that doesn't exist returns null and setting a field that doesn't exist automatically adds it.</param>
            <param name="schema">An object that contains properties that will be used to initialize the fields of the object. Can be a DataRow, IDataReader, or POCO.</param>
        </member>
        <member name="M:BizArk.Core.Data.BaObject.#ctor(BizArk.Core.Data.BaObjectOptions)">
            <summary>
            Creates a new instance of BaObject.
            </summary>
            <param name="options">The options used to setup the BaObject.</param>
        </member>
        <member name="M:BizArk.Core.Data.BaObject.InitSchemaFromObject(System.Object,System.Boolean)">
            <summary>
            Initializes the schema. Should be called from the constructor.
            </summary>
            <param name="schema">The object used to discover the schema.</param>
            <param name="setDflt">Determines if we will get the default value from the schema or not.</param>
        </member>
        <member name="M:BizArk.Core.Data.BaObject.InitFromDataRow(System.Data.DataRow)">
            <summary>
            Initializes the schema from a DataRow.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.BaObject.InitFromDataReader(System.Data.IDataReader)">
            <summary>
            Initializes the schema from an IDataReader.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.Data.BaObject.Options">
            <summary>
            Gets the options object used to create the BaObject.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.BaObject.Fields">
            <summary>
            Gets the fields in this object.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.BaObject.HasChanged">
            <summary>
            Gets a value that determines if the object has changed.
            </summary>
        </member>
        <member name="M:BizArk.Core.Data.BaObject.Add``1(System.String,``0)">
            <summary>
            Adds the field to the object.
            </summary>
            <typeparam name="T">The datatype for the field.</typeparam>
            <param name="fldName">Name of the field.</param>
            <param name="dflt">Default value for the field. Used to determine if the field has changed.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.BaObject.Add(System.String,System.Type,System.Object)">
            <summary>
            Adds the field to the object.
            </summary>
            <param name="fldName">Name of the field.</param>
            <param name="fldType">The data type for the field.</param>
            <param name="dflt">Default value for the field. Used to determine if the field has changed. If null, it is converted to the default value for fieldType.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.BaObject.TryGet(System.String,System.Object@)">
            <summary>
            Tries to get the value. Returns true if the value is in the object or if strict is false.
            </summary>
            <param name="fldName">Name of the field to get.</param>
            <param name="result">The value contained in the field. Value will be null if the field is not found and strict is false.</param>
            <returns>True if the field is found.</returns>
        </member>
        <member name="M:BizArk.Core.Data.BaObject.TrySet(System.String,System.Object)">
            <summary>
            Tries to set the value. If strict is off and the field is not found, it will be added.
            </summary>
            <param name="fldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.BaObject.GetChanges">
            <summary>
            Returns a dictionary of changed values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Data.BaObject.UpdateDefaults">
            <summary>
            Updates the default value to be the same as value so that the fields show up as not changed.
            </summary>
        </member>
        <member name="P:BizArk.Core.Data.BaObject.Item(System.String)">
            <summary>
            Gets or sets the value for the given field.
            </summary>
            <param name="fldName"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Data.BaObject.BaDynamicObject">
            <summary>
            Support for making BaObject dynamic. Hides implementation detail from BaObject (nobody needs to see all those methods).
            </summary>
        </member>
        <member name="T:BizArk.Core.Data.BaObject.DelegatingMetaObject">
            <summary>
            This class allows us to redirect MetaObject calls to the correct object.
            </summary>
            <remarks>This class courtesy of: http://stackoverflow.com/a/17634595/320</remarks>
        </member>
        <member name="E:BizArk.Core.Data.BaObject.PropertyChanged">
            <summary>
            Event raised when a field changes.
            </summary>
        </member>
        <member name="M:BizArk.Core.Data.BaObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BizArk.Core.Data.BaObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="fldName"></param>
        </member>
        <member name="T:BizArk.Core.Extensions.ArrayExt.ArrayExt">
            <summary>
            Provides extension methods for string arrays.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.ArrayExt.ArrayExt.Convert``1(System.Array)">
            <summary>
            Converts the array to a different type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ArrayExt.ArrayExt.Convert(System.Array,System.Type)">
            <summary>
            Converts the array to a different type.
            </summary>
            <param name="arr"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ArrayExt.ArrayExt.RemoveEmpties(System.String[])">
            <summary>
            Creates a new array that contains the non-empty elements of the given array.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ArrayExt.ArrayExt.RemoveEmpties(System.Array)">
            <summary>
            Creates a new array that contains the non-empty elements of the given array.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ArrayExt.ArrayExt.Join(System.Array,System.String)">
            <summary>
            Joins the elements of an array together as a string using the given separator.
            </summary>
            <param name="arr"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ArrayExt.ArrayExt.IndexOf(System.Array,System.Object)">
            <summary>
            Searches for the specified object and returns the index of the first occurrence
            within the entire one-dimensional System.Array.
            </summary>
            <param name="arr">The one-dimensional System.Array to search.</param>
            <param name="val">The object to locate in array.</param>
            <returns>
            The index of the first occurrence of value within the entire array, if found;
            otherwise, the lower bound of the array minus 1.
            </returns>
            <exception cref="T:System.ArgumentNullException">arr is null</exception>
            <exception cref="T:System.RankException">arr is multidimensional.</exception>
        </member>
        <member name="M:BizArk.Core.Extensions.ArrayExt.ArrayExt.Contains(System.Array,System.Object)">
            <summary>
            Determines if the array contains the given value.
            </summary>
            <param name="arr">The one-dimensional System.Array to search.</param>
            <param name="val">The object to locate in array.</param>
            <returns>
            </returns>
            <exception cref="T:System.ArgumentNullException">arr is null</exception>
            <exception cref="T:System.RankException">arr is multidimensional.</exception>
        </member>
        <member name="M:BizArk.Core.Extensions.ArrayExt.ArrayExt.Copy(System.Array)">
            <summary>
            Copies the array to a new array of the same type.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ArrayExt.ArrayExt.ToHex(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Converts the collection of bytes into a hex strings (no prefix).
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Extensions.AttributeExt.AttributeExt">
            <summary>
            Provides extension methods for PropertyDescriptor.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.AttributeExt.AttributeExt.GetAttribute``1(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the specified attribute from the PropertyDescriptor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.AttributeExt.AttributeExt.GetAttributes``1(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the specified attributes from the PropertyDescriptor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.AttributeExt.AttributeExt.GetAttribute``1(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the specified attribute from the PropertyDescriptor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.AttributeExt.AttributeExt.GetAttribute``1(System.Type,System.Boolean)">
            <summary>
            Gets the specified attribute from the type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.AttributeExt.AttributeExt.GetAttribute``1(System.Reflection.Assembly)">
            <summary>
            Gets the specified attribute for the assembly.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.AttributeExt.AttributeExt.GetAttribute``1(System.Object,System.Boolean)">
            <summary>
            Gets the specified attribute from the PropertyDescriptor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.AttributeExt.AttributeExt.GetAttribute``1(System.Enum)">
            <summary>
            Gets the specified attribute from the Enum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.AttributeExt.AttributeExt.GetDescription(System.Enum)">
            <summary>
            Gets the value from the DescriptionAttribute for the given enumeration value.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Extensions.DataExt.DataExt">
            <summary>
            Provides extension methods for string arrays.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetString(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as a string. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetString(System.Data.DataRow,System.String,System.String)">
            <summary>
            Returns the field value as a string. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetInt(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetInt(System.Data.DataRow,System.String,System.Int32)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetBool(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetBool(System.Data.DataRow,System.String,System.Boolean)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDateTime(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDateTime(System.Data.DataRow,System.String,System.DateTime)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDouble(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as a double. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDouble(System.Data.DataRow,System.String,System.Double)">
            <summary>
            Returns the field value as a double. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetGuid(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as a Guid. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetGuid(System.Data.DataRow,System.String,System.Guid)">
            <summary>
            Returns the field value as a Guid. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetValue``1(System.Data.DataRow,System.String)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetValue``1(System.Data.DataRow,System.String,``0)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetString(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as a string. Uses ConvertEx to convert the value to a string.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetString(System.Data.DataRowView,System.String,System.String)">
            <summary>
            Returns the field value as a string. Uses ConvertEx to convert the value to a string.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetInt(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetInt(System.Data.DataRowView,System.String,System.Int32)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetBool(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetBool(System.Data.DataRowView,System.String,System.Boolean)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDateTime(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDateTime(System.Data.DataRowView,System.String,System.DateTime)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDouble(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as a double. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDouble(System.Data.DataRowView,System.String,System.Double)">
            <summary>
            Returns the field value as a double. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetGuid(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as a Guid. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetGuid(System.Data.DataRowView,System.String,System.Guid)">
            <summary>
            Returns the field value as a Guid. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetValue``1(System.Data.DataRowView,System.String)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetValue``1(System.Data.DataRowView,System.String,``0)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.IsNull(System.Data.DataRowView,System.String)">
            <summary>
            Determines if the field is null.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetString(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a string. Uses ConvertEx to convert the value to a string.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetString(System.Data.IDataReader,System.String,System.String)">
            <summary>
            Returns the field value as a string. Uses ConvertEx to convert the value to a string.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetInt(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetInt(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetBool(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetBool(System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDateTime(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDateTime(System.Data.IDataReader,System.String,System.DateTime)">
            <summary>
            Returns the field value as a int. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDouble(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a double. Uses ConvertEx to convert the value to a double.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDouble(System.Data.IDataReader,System.String,System.Double)">
            <summary>
            Returns the field value as a double. Uses ConvertEx to convert the value to a double.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDecimal(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a decimal. Uses ConvertEx to convert the value to a decimal.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetDecimal(System.Data.IDataReader,System.String,System.Decimal)">
            <summary>
            Returns the field value as a decimal. Uses ConvertEx to convert the value to a decimal.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetGuid(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a Guid. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetGuid(System.Data.IDataReader,System.String,System.Guid)">
            <summary>
            Returns the field value as a Guid. Uses ConvertEx to convert the value.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetBytes(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as a byte array.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetValue``1(System.Data.IDataReader,System.String)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetValue``1(System.Data.IDataReader,System.String,``0)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="dfltVal">The value to return if the value is DBNull</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.GetValue(System.Data.IDataReader,System.String,System.Type)">
            <summary>
            Returns the field value as the specified type. Uses ConvertEx to convert the value to the correct type.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.IsNull(System.Data.IDataReader,System.String)">
            <summary>
            Determines if the field is null.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.ContainsField(System.Data.IDataReader,System.String)">
            <summary>
            Determines if the IDataReader contains the specified field.
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.AddWithValue(System.Data.SqlClient.SqlParameterCollection,System.String,System.Object,System.Boolean)">
            <summary>
            Adds a value to the end of the parameter collection.
            </summary>
            <param name="parameters"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="setNull">If true, sets the value to DBNull if it ConvertEx.IsEmpty is true.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.AddArrayParameters``1(System.Data.SqlClient.SqlCommand,System.Collections.Generic.IEnumerable{``0},System.String,System.Int32,System.String)">
            <summary>
            This will add an array of parameters to a SqlCommand. This is used for an IN statement.
            Use the returned value for the IN part of your SQL call. (i.e. SELECT * FROM table WHERE field IN ({paramNameRoot}))
            </summary>
            <param name="cmd">The SqlCommand object to add parameters to.</param>
            <param name="values">The array of strings that need to be added as parameters.</param>
            <param name="paramNameRoot">What the parameter should be named followed by a unique value for each value. This value surrounded by {} in the CommandText will be replaced.</param>
            <param name="start">The beginning number to append to the end of paramNameRoot for each value.</param>
            <param name="separator">The string that separates the parameter names in the sql command.</param>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.AddParameters(System.Data.SqlClient.SqlCommand,System.Object)">
            <summary>
            Adds the objects properties as parameters.
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:BizArk.Core.Extensions.DataExt.DataExt.DebugText(System.Data.SqlClient.SqlCommand)">
            <summary>
            Converts the command into TSql that can be executed in Sql Server Management Studio.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Extensions.DateExt.DateExt">
            <summary>
            Provides extension methods for dates.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.DateExt.DateExt.ToRelativeTimeString(System.DateTime)">
            <summary>
            Converts a Date to a string using relative time.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DateExt.DateExt.IsClose(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Determines if the two dates are within the amount of time specified.
            </summary>
            <param name="dt"></param>
            <param name="value"></param>
            <param name="giveOrTake">The amount of time, plus or minus, that the two dates can vary from one another and still be considered close.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DateExt.DateExt.IsClose(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Determines if the two dates are within the amount of time specified.
            </summary>
            <param name="dt"></param>
            <param name="value"></param>
            <param name="milliseconds">The amount of time, plus or minus, that the two dates can vary from one another and still be considered close.</param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Extensions.DrawingExt.DrawingExt">
            <summary>
            Extensions for classes within the Drawing namespace.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.ResizeMin(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Proportionally resizes a Size structure so that it is no smaller than the min size.
            </summary>
            <param name="sz"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.ResizeMin(System.Drawing.Size,System.Int32,System.Int32)">
            <summary>
            Proportionally resizes a Size structure so that it is no smaller than the min size.
            </summary>
            <param name="sz"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.ResizeMax(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Proportionally resizes a Size structure so that it is no larger than the max size.
            </summary>
            <param name="sz"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.ResizeMax(System.Drawing.Size,System.Int32,System.Int32)">
            <summary>
            Proportionally resizes a Size structure so that it is no larger than the max size.
            </summary>
            <param name="sz"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.ResizeOverflow(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Proportionally resizes a Size structure so that at least one side is no larger than the max size.
            </summary>
            <param name="sz"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.ResizeOverflow(System.Drawing.Size,System.Int32,System.Int32)">
            <summary>
            Proportionally resizes a Size structure so that at least one side is no larger than the max size.
            </summary>
            <param name="sz"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.Position(System.Drawing.Rectangle,System.Drawing.Rectangle,BizArk.Core.Extensions.DrawingExt.PositionStyle)">
            <summary>
            Changes the coordinates for the rectangle.
            </summary>
            <param name="rect"></param>
            <param name="parent"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.Position(System.Drawing.Size,System.Drawing.Rectangle,BizArk.Core.Extensions.DrawingExt.PositionStyle)">
            <summary>
            Gets the location to place an object of the given size within a parent area.
            </summary>
            <param name="sz"></param>
            <param name="parent"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.SetTop(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Sets the Top property.
            </summary>
            <param name="rect"></param>
            <param name="top"></param>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.SetLeft(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Sets the Left property.
            </summary>
            <param name="rect"></param>
            <param name="left"></param>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.SetRight(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Sets the Right property.
            </summary>
            <param name="rect"></param>
            <param name="right"></param>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.SetBottom(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Sets the bottom property.
            </summary>
            <param name="rect"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.ToMemSize(System.Int64)">
            <summary>
            Gets a string that represents the number of bytes.
            </summary>
            <param name="numBytes"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.DrawingExt.DrawingExt.SizeOf(System.Drawing.Image)">
            <summary>
            Gets the number of bytes for an image.
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Extensions.DrawingExt.PositionStyle">
            <summary>
            Location of an element.
            </summary>
        </member>
        <member name="F:BizArk.Core.Extensions.DrawingExt.PositionStyle.TopLeft">
            <summary>Aligned to the top left</summary>
        </member>
        <member name="F:BizArk.Core.Extensions.DrawingExt.PositionStyle.TopCenter">
            <summary>Aligned to the top center</summary>
        </member>
        <member name="F:BizArk.Core.Extensions.DrawingExt.PositionStyle.TopRight">
            <summary>Aligned to the top right</summary>
        </member>
        <member name="F:BizArk.Core.Extensions.DrawingExt.PositionStyle.MiddleLeft">
            <summary>Aligned to the middle left</summary>
        </member>
        <member name="F:BizArk.Core.Extensions.DrawingExt.PositionStyle.MiddleCenter">
            <summary>Aligned to the middle center</summary>
        </member>
        <member name="F:BizArk.Core.Extensions.DrawingExt.PositionStyle.MiddleRight">
            <summary>Aligned to the middle right</summary>
        </member>
        <member name="F:BizArk.Core.Extensions.DrawingExt.PositionStyle.BottomLeft">
            <summary>Aligned to the bottom left</summary>
        </member>
        <member name="F:BizArk.Core.Extensions.DrawingExt.PositionStyle.BottomCenter">
            <summary>Aligned to the bottom center</summary>
        </member>
        <member name="F:BizArk.Core.Extensions.DrawingExt.PositionStyle.BottomRight">
            <summary>Aligned to the bottom right</summary>
        </member>
        <member name="T:BizArk.Core.Extensions.ExceptionExt.ExceptionExt">
            <summary>
            Extensions for classes within the Drawing namespace.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.ExceptionExt.ExceptionExt.GetDetails(System.Exception)">
            <summary>
            Gets the details of an exception suitable for display.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Extensions.FormatExt.FormatExt">
            <summary>
            Provides extension methods to format values.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Fmt(System.String,System.Object[])">
            <summary>
            Formats a string.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Fmt(System.Int16)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Fmt(System.Nullable{System.Int16})">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Fmt(System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Fmt(System.Nullable{System.Int32})">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Fmt(System.Int64)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Fmt(System.Nullable{System.Int64})">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Fmt(System.Decimal,System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Fmt(System.Nullable{System.Decimal},System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Fmt(System.Single,System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Fmt(System.Nullable{System.Single},System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Fmt(System.Double,System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Fmt(System.Nullable{System.Double},System.Int32)">
            <summary>
            Formats a numeric value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.FmtCurrency(System.Decimal,System.Int32)">
            <summary>
            Formats a currency value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.FmtCurrency(System.Nullable{System.Decimal},System.Int32)">
            <summary>
            Formats a currency value.
            </summary>
            <param name="val"></param>
            <param name="precision">Number of decimal places to show. If less than 0, uses the current cultures default.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.FormatExt.FormatExt.Tmpl(System.String,System.Object)">
            <summary>
            Uses a StringTemplate to replace the values in the string.
            </summary>
            <param name="template"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Extensions.ImageExt.ImageExt">
            <summary>
            Extension methods for images.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.ImageExt.ImageExt.Open(System.Drawing.Image)">
            <summary>
            Saves the image to the temp directory and opens it in the default application.
            </summary>
            <param name="img"></param>
        </member>
        <member name="M:BizArk.Core.Extensions.ImageExt.ImageExt.GetExtension(System.Drawing.Image)">
            <summary>
            Gets the default extension that can be used for the file name of the image.
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ImageExt.ImageExt.Resize(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Proportionally resizes an image to fit within the given dimensions.
            </summary>
            <param name="img"></param>
            <param name="maxWidth"></param>
            <param name="maxHeight"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ImageExt.ImageExt.Resize(System.Drawing.Image,System.Int32,System.Int32,BizArk.Core.Extensions.ImageExt.ResizeMethod)">
            <summary>
            Resizes an image.
            </summary>
            <param name="img"></param>
            <param name="maxWidth"></param>
            <param name="maxHeight"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ImageExt.ImageExt.Resize(System.Drawing.Image,System.Drawing.Size,BizArk.Core.Extensions.ImageExt.ResizeMethod)">
            <summary>
            Resizes an image.
            </summary>
            <param name="img"></param>
            <param name="max"></param>
            <param name="method"></param>
            <returns>The resized image. If the image does not need to be resized, returns the original image.</returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ImageExt.ImageExt.IsImage(System.String)">
            <summary>
            Determines if the path is the path to an image file. Supports jpg, jpeg, gif, bmp, emf, exif, ico, png, tif, and wmf.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Extensions.ImageExt.ResizeMethod">
            <summary>
            Methods of resizing.
            </summary>
        </member>
        <member name="F:BizArk.Core.Extensions.ImageExt.ResizeMethod.Fit">
            <summary>Shrink to fit within the given dimensions. Might not fill the given dimensions. If smaller than the given dimensions, will not be resized.</summary>
        </member>
        <member name="F:BizArk.Core.Extensions.ImageExt.ResizeMethod.FitStretch">
            <summary>Shrink or expand to fit within the given dimensions. Might not fill the given dimensions.</summary>
        </member>
        <member name="F:BizArk.Core.Extensions.ImageExt.ResizeMethod.Fill">
            <summary>Shrink and crop to fit within the given dimensions. If smaller than the given dimensions, will not be resized.</summary>
        </member>
        <member name="F:BizArk.Core.Extensions.ImageExt.ResizeMethod.FillStretch">
            <summary>Shrink or expand and crop to fit within the given dimensions.</summary>
        </member>
        <member name="F:BizArk.Core.Extensions.ImageExt.ResizeMethod.Stretch">
            <summary>Shrink or expand to fill the given dimensions. Does not maintain original proportions.</summary>
        </member>
        <member name="T:BizArk.Core.Extensions.MathExt.MathExt">
            <summary>
            Extension methods for numeric values.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.MathExt.MathExt.Between``1(``0,``0,``0)">
            <summary>
            Makes sure the value is between the values.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.MathExt.MathExt.IsBetween``1(``0,``0,``0)">
            <summary>
            Makes sure the value is between the values.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Extensions.ObjectExt.ObjectExt">
            <summary>
            Extends the Object class.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.ObjectExt.ObjectExt.To``1(System.Object)">
            <summary>
            Converts the value to the specified type. 
            Checks for a TypeConverter, conversion methods, 
            and the IConvertible interface. Uses <see cref="M:BizArk.Core.ConvertEx.To(System.Object,System.Type,System.IFormatProvider)"/>.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="obj">The value to convert from.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-value is null and conversionType is a value type.</exception>
            <exception cref="T:System.ArgumentNullException">conversionType is null.</exception>
        </member>
        <member name="M:BizArk.Core.Extensions.ObjectExt.ObjectExt.GetValue(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. Uses ObjectUtil.GetValue so you can use any propertyName that supports.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ObjectExt.ObjectExt.GetValue``1(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. Uses ObjectUtil.GetValue so you can use any propertyName that supports.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ObjectExt.ObjectExt.GetInt(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. Uses ObjectUtil.GetValue so you can use any propertyName that supports.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ObjectExt.ObjectExt.GetString(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. Uses ObjectUtil.GetValue so you can use any propertyName that supports.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ObjectExt.ObjectExt.GetBoolean(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. Uses ObjectUtil.GetValue so you can use any propertyName that supports.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ObjectExt.ObjectExt.GetDecimal(System.Object,System.String)">
            <summary>
            Gets the value for the given property name. Uses ObjectUtil.GetValue so you can use any propertyName that supports.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ObjectExt.ObjectExt.Validate(System.Object)">
            <summary>
            Uses DataAnnotations to validate the properties of the object.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:BizArk.Core.Extensions.ObjectExt.ObjectExt.GetNameValues(System.Object)">
            <summary>
            Gets a collection of name/value pairs based on the public properties of an object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.ObjectExt.ObjectExt.ToPropertyBag(System.Object)">
            <summary>
            Normalizes a large number of classes into a dictionary. Works with DataRow, IDataReader, IDictionary, or POCO.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Extensions.StringExt.StringExt">
            <summary>
            Provides extension methods for strings.
            </summary>
        </member>
        <member name="P:BizArk.Core.Extensions.StringExt.StringExt.DefaultWrapTabWidth">
            <summary>
            Gets or sets the size of a TAB (number of spaces). Used for calculating word wraps.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Wrap(System.String,System.Int32,System.String)">
            <summary>
            Forces the string to word wrap so that each line doesn't exceed the maxLineLength.
            </summary>
            <param name="str">The string to wrap.</param>
            <param name="maxWidth">The maximum number of characters per line.</param>
            <param name="prefix">Adds this string to the beginning of each line that has been broken (used for indenting text).</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Wrap(System.String,BizArk.Core.Extensions.StringExt.StringWrapOptions)">
            <summary>
            Forces the string to word wrap so that each line doesn't exceed the maxLineLength.
            </summary>
            <param name="str">The string to wrap.</param>
            <param name="options">The options used for wrapping a string.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.WrappedLines(System.String,System.Int32,System.String)">
            <summary>
            Forces the string to word wrap so that each line doesn't exceed the maxLineLength.
            </summary>
            <param name="str">The string to wrap.</param>
            <param name="maxWidth">The maximum number of characters per line.</param>
            <param name="prefix">Adds this string to the beginning of each line that has been broken (used for indenting text).</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.WrappedLines(System.String,BizArk.Core.Extensions.StringExt.StringWrapOptions)">
            <summary>
            Forces the string to word wrap so that each line doesn't exceed the maxLineLength.
            </summary>
            <param name="str">The string to wrap.</param>
            <param name="options">The options used for wrapping a string.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.CalcTabWidth(System.Int32,System.Byte)">
            <summary>
            Calculate the width of the tab based on where it is in the string.
            </summary>
            <param name="tabStart">The width of the string prior to the tab.</param>
            <param name="tabWidth">The max width of the tab.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.MeasureWidth(System.String,System.Byte)">
            <summary>
            This method measures the width of the string, taking tabs into account. Should only be used for beginning of a line or tabs will be off.
            </summary>
            <param name="str"></param>
            <param name="tabWidth"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Lines(System.String)">
            <summary>
            Splits the string into lines.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Words(System.String)">
            <summary>
            Splits the string into words (all white space is removed).
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.IsEmpty(System.String)">
            <summary>
            Shortcut for ConvertEx.IsEmpty. Works because this is an extension method, not a real method.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.HasValue(System.String)">
            <summary>
            Shortcut for !ConvertEx.IsEmpty. Works because this is an extension method, not a real method.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Max(System.String,System.Int32)">
            <summary>
            Gets the string up to the maximum number of characters.
            </summary>
            <param name="str"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Split``1(System.String,System.Char[])">
            <summary>
            Returns an array split along the separator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Max(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the string up to the maximum number of characters. If ellipses is true and the string is longer than the max, the last 3 chars will be ellipses.
            </summary>
            <param name="str"></param>
            <param name="max"></param>
            <param name="ellipses"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.IsAscii(System.String)">
            <summary>
            Determines if a string consists of all valid ASCII values.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Right(System.String,System.Int32)">
            <summary>
            Gets the right side of the string.
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Left(System.String,System.Int32)">
            <summary>
            Truncates the string.
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.IfEmpty(System.String,System.String)">
            <summary>
            If the string is empty, returns the default.
            </summary>
            <param name="str"></param>
            <param name="dflt"></param>
            <returns></returns>
        </member>
        <member name="F:BizArk.Core.Extensions.StringExt.StringExt.Vowels">
            <summary>
            Vowels. Used for IsVowel.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.IsVowel(System.Char)">
            <summary>
            Determines if the character is a vowel.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.ToStream(System.String,System.Text.Encoding)">
            <summary>
            Puts the string into a MemoryStream. Resets the MemoryStream to position 0 so it can be read from.
            </summary>
            <param name="str"></param>
            <param name="encoding">The encoding to use to write the string to the stream. If null, uses the default encoding.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            Puts the string into an array of bytes.
            </summary>
            <param name="str"></param>
            <param name="encoding">The encoding to use to write the string to array of bytes. If null, uses the default encoding.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.SHA256(System.String,System.String)">
            <summary>
            Hashes the string using SHA-256.
            </summary>
            <param name="str">The value to hash.</param>
            <param name="salt">An optional salt.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.SHA256(System.String,System.Byte[])">
            <summary>
            Hashes the string using SHA-256.
            </summary>
            <param name="str">The value to hash.</param>
            <param name="salt">An optional salt.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.SHA512(System.String,System.String)">
            <summary>
            Hashes the string using SHA-512.
            </summary>
            <param name="str">The value to hash.</param>
            <param name="salt">An optional salt.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.SHA512(System.String,System.Byte[])">
            <summary>
            Hashes the string using SHA-512.
            </summary>
            <param name="str">The value to hash.</param>
            <param name="salt">An optional salt.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Substring(System.Text.StringBuilder,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
            character position and continues to the end of the string.
            </summary>
            <param name="sb"></param>
            <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
            <returns>
            A string that is equivalent to the substring that begins at startIndex in this
            instance, or System.String.Empty if startIndex is equal to the length of this instance.
            </returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Substring(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
            character position and continues to the end of the string.
            </summary>
            <param name="sb"></param>
            <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
            <param name="length">The number of characters in the substring.</param>
            <returns>
            A string that is equivalent to the substring of length length that begins at
            startIndex in this instance, or System.String.Empty if startIndex is equal to
            the length of this instance and length is zero.
            </returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Trim(System.Text.StringBuilder)">
            <summary>
            Removes all leading and trailing white-space characters from the current System.String object.
            </summary>
            <param name="sb"></param>
            <returns>
            The string that remains after all white-space characters are removed from the
            start and end of the current string. If no characters can be trimmed from the
            current instance, the method returns the current instance unchanged.
            </returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.TrimEnd(System.Text.StringBuilder)">
            <summary>
            Removes all trailing occurrences of a set of characters specified in an array
            from the current System.String object.
            </summary>
            <param name="sb"></param>
            <returns>
            The string that remains after all white-space characters are removed from the
            start and end of the current string. If no characters can be trimmed from the
            current instance, the method returns the current instance unchanged.
            </returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Split(System.String,System.Char,System.Boolean)">
            <summary>
            Splits a string on the given char and if trim is true, removes leading and trailing whitespace characters from each element.
            </summary>
            <param name="str">The string to split.</param>
            <param name="separator">The char used to split the string.</param>
            <param name="trim">If true, removes leading and trailing whitespace characters from each element.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Split``1(System.String,System.Char)">
            <summary>
            Splits a string on the given char and if trim is true, removes leading and trailing whitespace characters from each element.
            </summary>
            <param name="str">The string to split.</param>
            <param name="separator">The char used to split the string.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Split(System.String,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Splits a string on the given char and if trim is true, removes leading and trailing whitespace characters from each element.
            </summary>
            <param name="str">The string to split.</param>
            <param name="separator">The char used to split the string.</param>
            <param name="trim">If true, removes leading and trailing whitespace characters from each element.</param>
            <param name="removeEmpties">Removes empty elements from the string.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.StringExt.StringExt.Split``1(System.String,System.Char,System.Boolean)">
            <summary>
            Splits a string on the given char and if trim is true, removes leading and trailing whitespace characters from each element.
            </summary>
            <param name="str">The string to split.</param>
            <param name="separator">The char used to split the string.</param>
            <param name="removeEmpties">Removes empty elements from the string.</param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Extensions.StringExt.StringWrapOptions">
            <summary>
            Options for StringExt.Wrap().
            </summary>
        </member>
        <member name="P:BizArk.Core.Extensions.StringExt.StringWrapOptions.MaxWidth">
            <summary>
            Gets or sets the maximum number of characters in a line.
            </summary>
        </member>
        <member name="P:BizArk.Core.Extensions.StringExt.StringWrapOptions.Prefix">
            <summary>
            Gets or sets the prefix used for wrapped lines. Will only be applied to lines created after the initial line.
            </summary>
        </member>
        <member name="P:BizArk.Core.Extensions.StringExt.StringWrapOptions.TabWidth">
            <summary>
            Gets or sets the max width of a TAB character. 
            </summary>
        </member>
        <member name="T:BizArk.Core.Extensions.TypeExt.TypeExt">
            <summary>
            Provides extension methods for Type.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.TypeExt.TypeExt.Implements(System.Type,System.Type)">
            <summary>
            Determines if the type implements the given interface.
            </summary>
            <param name="type"></param>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.TypeExt.TypeExt.IsDerivedFrom(System.Type,System.Type)">
            <summary>
            Determines if the type is derived from the given base type.
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.TypeExt.TypeExt.IsDerivedFromGenericType(System.Type,System.Type)">
            <summary>
            Determines if the type is an instance of a generic type.
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.TypeExt.TypeExt.Instantiate(System.Type,System.Object[])">
            <summary>
            Creates a new instance of the type.
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.TypeExt.TypeExt.GetCSharpName(System.Type)">
            <summary>
            Gets the C# name of the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.TypeExt.TypeExt.IsNumericType(System.Type)">
            <summary>
            Determines if the type corresponds to one of the built in numeric types (such as int, double, etc).
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.TypeExt.TypeExt.GetTrueType(System.Type)">
            <summary>
            Gets the underlying type if the type is Nullable, otherwise just returns the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.TypeExt.TypeExt.GetFields``1(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the fields that are of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.TypeExt.TypeExt.AllowNull(System.Type)">
            <summary>
            Determines if the type supports null.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Extensions.WebExt.WebExt">
            <summary>
            Extension methods that are useful when working with web objects.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.WebExt.WebExt.GetContentString(System.Net.WebResponse)">
            <summary>
            Gets the content from a response.
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.WebExt.WebExt.HtmlEncode(System.String)">
            <summary>
            Encodes a string for safe HTML.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.WebExt.WebExt.HtmlDecode(System.String)">
            <summary>
            Decodes an encoded string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.WebExt.WebExt.UrlEncode(System.String)">
            <summary>
            Can be used to encode a query string value.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.WebExt.WebExt.UrlDecode(System.String)">
            <summary>
            Can be used to decode a url encoded value.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Extensions.XmlExt.XmlExt">
            <summary>
            Provides extension methods for processing Xml.
            </summary>
        </member>
        <member name="M:BizArk.Core.Extensions.XmlExt.XmlExt.GetString(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a string from an attribute or node.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.XmlExt.XmlExt.GetString(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets a string from an attribute or node.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="dfltVal"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.XmlExt.XmlExt.GetInt(System.Xml.XmlNode,System.String)">
            <summary>
            Gets an integer from an attribute or node.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.XmlExt.XmlExt.GetInt(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Gets an integer from an attribute or node.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="dfltVal"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Extensions.XmlExt.XmlExt.SetAttributeValue(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            Sets the value of the attribute to the given value. Creates the attribute if it doesn't exist. Uses ConvertEx to convert value to a string.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:BizArk.Core.Extensions.XmlExt.XmlExt.SetElementValue(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            Sets the value of the named element to the given value. Creates the element if it doesn't exist. Uses ConvertEx to convert value to a string.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:BizArk.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BizArk.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BizArk.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:BizArk.Core.Util.Bitmask">
            <summary>
            Represents a bitmask.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.Bitmask.#ctor(System.Int32)">
            <summary>
            Creates an instance of Bitmask.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:BizArk.Core.Util.Bitmask.Value">
            <summary>
            Gets the bitmask value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.Bitmask.GetBit(System.Int32)">
            <summary>
            Returns the value of the specified bit in the bitmask.
            </summary>
            <param name="bitNum">A value between 1 and 32 that represents the position of the bit in the bitmask.</param>
            <returns>True if the bit is 1, false if the bit is 0.</returns>
        </member>
        <member name="M:BizArk.Core.Util.Bitmask.SetBit(System.Int32,System.Boolean)">
            <summary>
            Sets the specified bit in the bitmask.
            </summary>
            <param name="bitNum">A value between 1 and 32 that represents the position of the bit in the bitmask.</param>
            <param name="val">True to set the bit to 1, false to set the bit to 0.</param>
            <returns>The updated bitmask.</returns>
        </member>
        <member name="M:BizArk.Core.Util.Bitmask.ToString">
            <summary>
            Gets a string that represents the bitmask. Primary intended for debugging purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.EqualityComparer">
            <summary>
            Provides a way to compare two values using a lambda expression.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.EqualityComparer.#ctor(System.Func{System.Object,System.Object,System.Boolean},System.Func{System.Object,System.Int32})">
            <summary>
            Creates an instance of EqualityComparer.
            </summary>
            <param name="comparer">A function that compares two values and returns true if they are equal.</param>
            <param name="hashCode">Returns the hash key for the object. Must be set to work properly with LINQ.</param>
        </member>
        <member name="P:BizArk.Core.Util.EqualityComparer.Comparer">
            <summary>
            Gets the function that compares two values and returns true if they are equal.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.EqualityComparer.HashCode">
            <summary>
            Gets the the function that gets the hash code for the object. Must be set to work properly with LINQ.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.EqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.EqualityComparer.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.FontUtil">
            <summary>
            Provides helper methods for working with fonts.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.FontUtil.RegisterFont(System.Byte[])">
            <summary>
            Register a font from a byte array. Useful when embedding fonts as a resource in your project.
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:BizArk.Core.Util.FontUtil.RegisterFont(System.String)">
            <summary>
            Register a font from a file.
            </summary>
            <param name="fontFilePath"></param>
        </member>
        <member name="M:BizArk.Core.Util.FontUtil.GetAllFamilies">
            <summary>
            Returns all of the installed and custom font families that are available.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.FontUtil.GetFamily(System.String)">
            <summary>
            Gets the FontFamily based on the name.
            </summary>
            <param name="family"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.FontUtil.Create(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)">
            <summary>
            Creates a font based (caller is responsible for disposing of the font). Will create any installed font or custom fonts that were registered with this class.
            </summary>
            <param name="family"></param>
            <param name="emSize"></param>
            <param name="style"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.Security">
            <summary>
            Provides some convenient methods for generating a hash from a string.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.Security.GenerateSalt(System.Int32)">
            <summary>
            Generates a cryptographically secure random salt. Uses RNGCryptoServiceProvider for security.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.Security.GenerateToken(System.Int32,System.String)">
            <summary>
            Generates a cryptographically secure random string of characters. Uses RNGCryptoServiceProvider for security.
            </summary>
            <param name="length">The length of the token to generate.</param>
            <param name="chars">The list of valid characters to use for the token.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.Security.SHA256(System.String,System.String)">
            <summary>
            Generates a hash based on SHA256.
            </summary>
            <param name="str">The value to hash.</param>
            <param name="salt">An optional salt.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.Security.SHA256(System.String,System.Byte[])">
            <summary>
            Generates a hash based on SHA256.
            </summary>
            <param name="str">The value to hash.</param>
            <param name="salt">An optional salt.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.Security.SHA256(System.Byte[],System.Byte[])">
            <summary>
            Generates a hash based on SHA256.
            </summary>
            <param name="value">The value to hash.</param>
            <param name="salt">An optional salt.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.Security.SHA512(System.String,System.String)">
            <summary>
            Generates a hash based on SHA512.
            </summary>
            <param name="str">The value to hash.</param>
            <param name="salt">An optional salt.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.Security.SHA512(System.String,System.Byte[])">
            <summary>
            Generates a hash based on SHA512.
            </summary>
            <param name="str">The value to hash.</param>
            <param name="salt">An optional salt.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.Security.SHA512(System.Byte[],System.Byte[])">
            <summary>
            Generates a hash based on SHA512.
            </summary>
            <param name="value">The value to hash.</param>
            <param name="salt">An optional salt.</param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.MemSize">
            <summary>
            This class represents the size for memory on a computer.
            </summary>
            <remarks>
            <para>There are two standards for calculating size. One standard uses base 1024 and the other uses base 1000. </para>
            <para>The base 1024 standard is called IEC and is the basic one that most computer scientists understand and use.
            To convert you multiply the higher order number by 1024 to get the lower order number (eg, 1 KiB = 1024 bytes).
            Due to widespread confusion in the retail industry, this is no longer the standard for memory size and the prefixes
            associated with them are now changed to be KiB, MiB, GiB, and TiB.</para>
            <para>The base 1000 standard is called SI and is easier to understand by the consumer market. To convert you mutiply
            the higher order number by 1000 to get the lower order number (eg, 1 KB = 1000 bytes). The prefixes for these are
            KB, MB, GB, and TB.</para>
            <para>For more information on this, see http://en.wikipedia.org/wiki/Binary_prefix.</para>
            </remarks>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.#ctor(System.Int64)">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.Zero">
            <summary>
            Represents a 0 byte memory size.
            </summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInKilobyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInMegabyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInGigabyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInTerabyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInKibibyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInMebibyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInGibibyte">
            <summary></summary>
        </member>
        <member name="F:BizArk.Core.Util.MemSize.cNumBytesInTebibyte">
            <summary></summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalBytes">
            <summary>
            Gets the total number of bytes for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalKilobytes">
            <summary>
            Gets the total number of Kilobytes (SI, x1000) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalMegabytes">
            <summary>
            Gets the total number of Megabytes (SI, x1000) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalGigabytes">
            <summary>
            Gets the total number of Gigabytes (SI, x1000) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalTerabytes">
            <summary>
            Gets the total number of Terabytes (SI, x1000) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalKibibytes">
            <summary>
            Gets the total number of Kibibytes (IEC, x1024) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalMebibytes">
            <summary>
            Gets the total number of Mebibytes (IEC, x1024) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalGibibytes">
            <summary>
            Gets the total number of Gibibytes (IEC, x1024) for this MemSize.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.MemSize.TotalTebibytes">
            <summary>
            Gets the total number of Tebibytes (IEC, x1024) for this MemSize.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.GetString(System.Int64)">
            <summary>
            Returns a string representation of the size. 
            </summary>
            <param name="totalBytes"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.GetString(System.Int64,System.String)">
            <summary>
            Returns a string representation of the size. 
            </summary>
            <param name="totalBytes"></param>
            <param name="format">Can be IEC, SI (see http://en.wikipedia.org/wiki/Binary_prefix), KB, MB, GB, TB, KiB, MiB, GiB, or TiB. If null, IEC is assumed. Any other values will show the total number of bytes. If you want an IEC value with an SI prefix (old style), add a * to the format (ex, "IEC*"). This is ignored if using an SI format.</param> 
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.ToString">
            <summary>
            Returns a string representation of the size. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.ToString(System.String)">
            <summary>
            Returns a string representation of the size. 
            </summary>
            <param name="format">Can be IEC, SI (see http://en.wikipedia.org/wiki/Binary_prefix), KB, MB, GB, TB, KiB, MiB, GiB, or TiB. If null, IEC is assumed. Any other values will show the total number of bytes. If you want an IEC value with an SI prefix (old style), add a * to the format (ex, "IEC*"). This is ignored if using an SI format.</param> 
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the size. 
            </summary>
            <param name="format">Can be IEC, SI (see http://en.wikipedia.org/wiki/Binary_prefix), KB, MB, GB, TB, KiB, MiB, GiB, or TiB. If null, IEC is assumed. Any other values will show the total number of bytes. If you want an IEC value with an SI prefix (old style), add a * to the format (ex, "IEC*"). This is ignored if using an SI format.</param> 
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.op_Implicit(BizArk.Core.Util.MemSize)~System.Int64">
            <summary>
            Converts a MemSize to a long by returning the total number of bytes.
            </summary>
            <param name="sz"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.MemSize.op_Implicit(System.Int64)~BizArk.Core.Util.MemSize">
            <summary>
            Converts a long that represents a number of bytes to a MemSize.
            </summary>
            <param name="numBytes"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.MimeMap">
            <summary>
            Provides a lookup service to get the MimeType based on a file extension. The default data comes from the Mime.Types file that is embedded in this project and the registry.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.MimeMap.InitializeFromRegistry">
            <summary>
            Initializes the mime map from the registry.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.MimeMap.Initialize(System.String)">
            <summary>
            Initializes the mime map from the string.
            </summary>
            <param name="mimeTypes">List of mime types. Uses the format in Apache Mime.Types format. View at http://svn.apache.org/viewvc/httpd/httpd/trunk/docs/conf/mime.types?view=markup.</param>
        </member>
        <member name="M:BizArk.Core.Util.MimeMap.RegisterMimeType(System.String,System.String[])">
            <summary>
            Register a mime type.
            </summary>
            <param name="mimeType">The mime type. Ex: text/plain.</param>
            <param name="extensions">List of extensions for this mime type</param>
        </member>
        <member name="M:BizArk.Core.Util.MimeMap.GetMimeType(System.String)">
            <summary>
            Gets the mime type based on the extension.
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.NameValue">
            <summary>
            Represents a named value. Immutable.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.NameValue.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Creates an instance of NameValue.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="valueType"></param>
        </member>
        <member name="P:BizArk.Core.Util.NameValue.Name">
            <summary>
            Gets the name for the pair.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.NameValue.Value">
            <summary>
            Gets the value for the pair.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.NameValue.ValueType">
            <summary>
            Gets the expected type for the value.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.NameValue.ToString">
            <summary>
            Provides a debug friendly string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.NameValue`1">
            <summary>
            Represents a named typed value. Immutable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BizArk.Core.Util.NameValue`1.#ctor(System.String,System.Object)">
            <summary>
            Creates an instance of NameValue.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:BizArk.Core.Util.NameValue`1.Value">
            <summary>
            Gets the value for the pair.
            </summary>
        </member>
        <member name="T:BizArk.Core.Util.ObjectDictionary">
            <summary>
            Wraps an object so it can be accessed via a dictionary interface using dot syntax like -> myobject.contacts["john"].Email
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.ObjectDictionary.#ctor(System.Object)">
            <summary>
            Creates an instance of ObjectDictionary.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:BizArk.Core.Util.ObjectDictionary.Object">
            <summary>
            Gets the object that this dictionary wraps.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.ObjectDictionary.Item(System.String)">
            <summary>
            Gets/sets the value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.ObjectDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.ObjectUtil">
            <summary>
            Provides utility methods for working with objects.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.ObjectUtil.ToPropertyBag(System.Object)">
            <summary>
            Converts the object to a dictionary with name/value pairs.
            </summary>
            <param name="obj">Can be a POCO, DataRow, IDataReader.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.ObjectUtil.GetValue``1(System.Object,System.String,``0)">
            <summary>
            Gets the value from the object with the given name. Uses . notation to find values in object graphs. Supports array syntax as well, but does not support method calls. If any of the properties in the chain are null, dflt is returned. Uses ConvertEx to return the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="key"></param>
            <param name="dflt"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.ObjectUtil.GetValue(System.Object,System.String)">
            <summary>
            Gets the value from the object with the given name. Uses . notation to find values in object graphs. Supports array syntax as well, but does not support method calls. If any of the properties in the chain are null, null is returned.
            </summary>
            <param name="obj"></param>
            <param name="key">Property name chain. Use . to separate properties. Use [#] for array lookup. Use [KEY] (quotes not required) for dictionary lookup.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.ObjectUtil.TryGetValue``1(System.Object,System.String,``0@,``0)">
            <summary>
            Tries to get the value. Returns false if the key is not valid. If we simply can't reach the object in question, returns true, but value will be null.
            </summary>
            <param name="obj"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dflt">Default value if unable to get the value.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.ObjectUtil.TryGetValue(System.Object,System.String,System.Object@)">
            <summary>
            Tries to get the value. Returns false if the key is not valid. If we simply can't reach the object in question, returns true, but value will be null.
            </summary>
            <param name="obj"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.Range`1">
            <summary>
            Represents a mathmatical range of values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BizArk.Core.Util.Range`1.#ctor(`0,`0)">
            <summary>
            Creates an instance of Range.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="P:BizArk.Core.Util.Range`1.Start">
            <summary>
            Gets the start of the range.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.Range`1.End">
            <summary>
            Gets the end of the range.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.Range`1.Includes(`0)">
            <summary>
            Determines if the given value is within the range of acceptable values.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.RemoteDateTime">
            <summary>
            Provides a convenient DateTime wrapper for handling remote date/time values (eg, the server date/time).
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.RemoteDateTime.#ctor(System.DateTime)">
            <summary>
            Creates an instance of RemoteDateTime.
            </summary>
            <param name="start"></param>
        </member>
        <member name="P:BizArk.Core.Util.RemoteDateTime.Start">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.RemoteDateTime.Elapsed">
            <summary>
            Gets the amount of time that has elapsed since this was started.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.RemoteDateTime.Now">
            <summary>
            Gets the value that represents the current DateTime on the remote machine.
            </summary>
        </member>
        <member name="T:BizArk.Core.Util.StringTemplate">
            <summary>
            Provides a way to format a string using named parameters instead of positional parameters.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.StringTemplate.#ctor(System.String)">
            <summary>
            Creates an instance of StringTemplate.
            </summary>
            <param name="template"></param>
        </member>
        <member name="P:BizArk.Core.Util.StringTemplate.Template">
            <summary>
            Gets the template string.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.StringTemplate.ArgNames">
            <summary>
            Gets the names for the arguments.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.StringTemplate.Format(System.Object)">
            <summary>
            Gets the formatted string.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.StringTemplate.ToString">
            <summary>
            Gets the template.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.StringTemplate.Format(System.String,System.Object)">
            <summary>
            Format a string template with the given values.
            </summary>
            <param name="template"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.StringTemplate.CreateFormat">
            <summary>
            Called from Format property to parse the template and create a format string.
            </summary>
        </member>
        <member name="T:BizArk.Core.Util.StringWriterEx">
            <summary>
            Implements a System.IO.TextWriter for writing information to a string. The 
            information is stored in an underlying System.Text.StringBuilder.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.StringWriterEx.#ctor(System.Text.Encoding)">
            <summary>
            Creates an instance of StringWriterEx.
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:BizArk.Core.Util.StringWriterEx.#ctor(System.Text.StringBuilder,System.Text.Encoding)">
            <summary>
            Creates an instance of StringWriterEx.
            </summary>
            <param name="sb"></param>
            <param name="encoding"></param>
        </member>
        <member name="P:BizArk.Core.Util.StringWriterEx.Encoding">
            <summary>
            Gets the System.Text.Encoding in which the output is written.
            </summary>
        </member>
        <member name="T:BizArk.Core.Util.TempFile">
            <summary>
            Manages a temporary file. Deletes the file when disposed.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.#ctor">
            <summary>
            Creates an instance of TempFile.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.#ctor(System.String)">
            <summary>
            Creates an instance of TempFile.
            </summary>
            <param name="ext">The extension for the file.</param>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of TempFile.
            </summary>
            <param name="dir">The path to the directory.</param>
            <param name="template">The template for the file name. Place a {0} where the counter should go (ex, MyPicture{0}.jpg).</param>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.Dispose">
            <summary>
            Deletes the temp file if it exists.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.Dispose(System.Boolean)">
            <summary>
            Deletes the temp file if it exists.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:BizArk.Core.Util.TempFile.Disposed">
            <summary>
            Gets a flag that determines if the temp file has been disposed.
            </summary>
        </member>
        <member name="P:BizArk.Core.Util.TempFile.TempPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.Write(System.String)">
            <summary>
            Creates the temp file and writes the contents to it. 
            </summary>
            <param name="contents"></param>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.Append(System.String)">
            <summary>
            Appends the contents to the temp file. Creates the temp file if it doesn't already exist.
            </summary>
            <param name="contents"></param>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.Write(System.Byte[])">
            <summary>
            Creates the temp file and writes the contents to it.
            </summary>
            <param name="contents"></param>
        </member>
        <member name="M:BizArk.Core.Util.TempFile.Delete">
            <summary>
            Deletes the temp file if it exists.
            </summary>
        </member>
        <member name="T:BizArk.Core.Util.WebUtil">
            <summary>
            Web related helper methods.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.WebUtil.GetUrlEncodedData(System.Object)">
            <summary>
            Creates a query string without referencing System.Web.
            </summary>
            <param name="values">Encodes the properties of the class. If values is a NameValueCollection, the values of the collection will be encoded.</param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.WebUtil.GenerateSlug(System.String,System.Int32)">
            <summary>
            Transforms a string into an identifier that can be used in a url.
            </summary>
            <param name="phrase"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.WebUtil.GetContent(System.Net.HttpWebResponse)">
            <summary>
            Gets the contents of the response. Handles decompression if needed.
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:BizArk.Core.Util.FileEx">
            <summary>
            Provides methods that are useful when working with files and directories.
            </summary>
        </member>
        <member name="M:BizArk.Core.Util.FileEx.RemoveDirectory(System.String)">
            <summary>
            Removes a directory as best as it can, this includes all files and subdirectories. Errors are ignored.
            </summary>
            <param name="dirPath"></param>
        </member>
        <member name="M:BizArk.Core.Util.FileEx.GetIDDir(System.Int32)">
            <summary>
            Gets a directory structure based on a number. For example, if the number passed in is 12345, 00/00/00/01/23 is passed back. Useful if you have a large number of files stored on disk.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.Util.FileEx.GetUniqueFileName(System.String,System.String)">
            <summary>
            Creates a unique file name in the given directory. 
            </summary>
            <param name="dir">The path to the directory.</param>
            <param name="template">The template for the file name. Place a {0} where the counter should go (ex, MyPicture{0}.jpg).</param>
            <returns>The full path to the unique file name.</returns>
        </member>
        <member name="M:BizArk.Core.Util.FileEx.GetLegalFileName(System.String)">
            <summary>
            Strips illegal characters from a potential file name.
            </summary>
            <param name="name"></param>
            <returns>Legal file name.</returns>
        </member>
        <member name="M:BizArk.Core.Util.FileEx.GetUniqueFileName(System.String)">
            <summary>
            Creates a unique file name in the temp directory.
            </summary>
            <param name="ext">The extension for the file.</param>
            <returns>The full path to the unique file name.</returns>
        </member>
        <member name="M:BizArk.Core.Util.FileEx.GetUniqueFileName">
            <summary>
            Creates a unique file name in the temp directory. The file will have an extension of .tmp.
            </summary>
            <returns>The full path to the unique file name.</returns>
        </member>
        <member name="M:BizArk.Core.Util.FileEx.DeleteFile(System.String)">
            <summary>
            Does everything possible to delete a file, including changing the file attributes. If unable to delete will throw ApplicationException.
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:BizArk.Core.ClassFactory">
            <summary>
            The class factory for objects allows for objects to be changed at runtime.
            </summary>
        </member>
        <member name="M:BizArk.Core.ClassFactory.CreateObject``1(System.Object[])">
            <summary>
            Creates an object of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BizArk.Core.ClassFactory.CreateObject(System.Type,System.Object[])">
            <summary>
            Creates an object of the specified type.
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:BizArk.Core.ClassFactory.Factory">
            <summary>
            Get or set the factory to use. Only a single factory can be used at a time.
            </summary>
        </member>
        <member name="T:TourFactory.Core.Extensions.StreamExt.StreamExt">
            <summary>
            Provides utility methods for handling streams.
            </summary>
        </member>
        <member name="M:TourFactory.Core.Extensions.StreamExt.StreamExt.Write(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies the stream to another stream.
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <param name="bufferSize">Size of the buffer to use for copying the stream.</param>
        </member>
    </members>
</doc>
